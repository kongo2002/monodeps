name: Rust

on:
  push:
    branches: [ master ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v3

    - name: Run tests
      run: cargo test --verbose

  build:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}

    strategy:
      fail-fast: false
      matrix:
        job:
          - { id: aarch64-unknown-linux-gnu   , target: aarch64-unknown-linux-gnu   , os: ubuntu-24.04, use-cross: true }
          - { id: arm-unknown-linux-gnueabihf , target: arm-unknown-linux-gnueabihf , os: ubuntu-24.04, use-cross: true }
          - { id: arm-unknown-linux-musleabihf, target: arm-unknown-linux-musleabihf, os: ubuntu-24.04, use-cross: true }
          - { id: i686-unknown-linux-gnu      , target: i686-unknown-linux-gnu      , os: ubuntu-24.04, use-cross: true }
          - { id: i686-unknown-linux-musl     , target: i686-unknown-linux-musl     , os: ubuntu-24.04, use-cross: true }
          # the macos-13 image is amd64 based
          - { id: x86_64-apple-darwin         , target: x86_64-apple-darwin         , os: macos-13                      }
          # the macos-14 image is arm64 based
          - { id: aarch64-apple-darwin        , target: aarch64-apple-darwin        , os: macos-14                      }
          - { id: x86_64-unknown-linux-gnu    , target: x86_64-unknown-linux-gnu    , os: ubuntu-24.04, use-cross: true }
          - { id: x86_64-unknown-linux-musl   , target: x86_64-unknown-linux-musl   , os: ubuntu-24.04, use-cross: true }
    env:
      BUILD_CMD: cargo

    steps:
    - uses: actions/checkout@v4

    - name: Install prerequisites
      shell: bash
      run: |
        case ${{ matrix.job.target }} in
          arm-unknown-linux-*) sudo apt-get -y update ; sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
          aarch64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu ;;
        esac
        case ${{ matrix.job.os }} in
          ubuntu-*) sudo apt-get -y install libssl-dev ;;
        esac

    - name: Extract crate information
      shell: bash
      run: |
        echo "PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> "$GITHUB_ENV"
        echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> "$GITHUB_ENV"
        echo "PROJECT_MAINTAINER=$(sed -n 's/^authors = \["\(.*\)"\]/\1/p' Cargo.toml)" >> "$GITHUB_ENV"
        echo "PROJECT_HOMEPAGE=$(sed -n 's/^homepage = "\(.*\)"/\1/p' Cargo.toml)" >> "$GITHUB_ENV"

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: ${{ matrix.job.target }}

    - name: Show version information
      shell: bash
      run: |
        gcc --version || true
        rustup -V
        rustup toolchain list
        rustup default
        cargo -V
        rustc -V

    - name: Install cross
      if: matrix.job.use-cross
      uses: taiki-e/install-action@v2
      with:
        tool: cross

    - name: Overwrite build command env variable
      if: matrix.job.use-cross
      shell: bash
      run: echo "BUILD_CMD=cross" >> "$GITHUB_ENV"

    - name: Build release
      shell: bash
      run: $BUILD_CMD build --locked --release --target=${{ matrix.job.target }}

    - name: Run monodeps
      shell: bash
      run: $BUILD_CMD run --locked --release --target=${{ matrix.job.target }} -- -h

    - name: Create archive
      id: package
      shell: bash
      run: |
        PKG_BASENAME=${PROJECT_NAME}-v${PROJECT_VERSION}-${{ matrix.job.id }}
        PKG_NAME=${PKG_BASENAME}.tar.gz
        PKG_STAGING="output"
        ARCHIVE_DIR="${PKG_STAGING}/package/"
        mkdir -p "${ARCHIVE_DIR}"
        cp "target/${{ matrix.job.target }}/release/${{ env.PROJECT_NAME }}" "$ARCHIVE_DIR"
        cp "README.md" "LICENSE" "$ARCHIVE_DIR"
        pushd "${ARCHIVE_DIR}/" >/dev/null
        tar czf "../${PKG_NAME}" *
        popd >/dev/null
        echo "PKG_NAME=${PKG_NAME}" >> "$GITHUB_OUTPUT"
        echo "PKG_PATH=${PKG_STAGING}/${PKG_NAME}" >> "$GITHUB_OUTPUT"

    - name: Artifact upload
      uses: actions/upload-artifact@master
      with:
        name: ${{ steps.package.outputs.PKG_NAME }}
        path: ${{ steps.package.outputs.PKG_PATH }}

    - name: Publish release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ${{ steps.package.outputs.PKG_PATH }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
